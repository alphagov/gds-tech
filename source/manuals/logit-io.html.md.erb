---
title: Sending logs securely to Logit.io
section: Manuals
---

# <%= current_page.data.title %>

## Provision a new stack

Create a new stack from the Logit.io dashboard with the "Add stack" action.

### Stack name

When choosing a name for the new stack, consider that other teams will need
to use this name to usefully differentiate your stack from one of theirs, and
that your own team will need to differentiate between stacks that they own.
The name should be specific but concise, and convey information about who
owns it and which environment it serves.

 * Good: `GOV.UK Verify Hub Production (Green)`
 * Bad: `New dev environment 2`

### Stack version

Choose the newest ELK version option unless you have specific reasons not to.

### Stack ID and API key

An ID and API key will be generated for the stack. You can find this information
in the `Details` page of the stack settings page.

The stack ID and API keys will both be UUIDs. We'll use the UUID
`f046ca39-8388-4c49-a536-19f95a555905` in our examples for the rest of this
manual.

### Logstash endpoint

The Logstash endpoint is formed from the stack ID. Our example stack's Logstash
endpoint is `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io`.

Logstash speaks many different protocols and these are all assigned to
sequential TCP ports which are visible from `Logstash Inputs` under the stack
settings page.

TCP ports are assigned on a per-stack basis at stack creation time and will be
different per stack. We assume this is so that Logit can share IP addresses
between many stacks.

## Shut down unsecure inputs

Logit stacks have a very lax security configuration by default. Each of the
inputs listed will be behind a TCP port that is open to the internet at large,
and will not authenticate clients that connect.

We are interested only in `Beats-SSL` and `Syslog-SSL`. Put in a support request
to Logit to close the TCP or UDP ports for all other protocols.

If you know in advance which IP addresses or address ranges you will be sourcing
logging traffic from, include these in your request so that the `Beats-SSL` and
`Syslog-SSL` ports can be whitelisted.

## Request TLS mutual auth

Also via a support request to Logit, request that TLS mutual auth be switched on
for your stack.

Logit provide two methods by which this can be done. With one method, we provide
them with a CA certificate of our own and instruct them to trust client certificates
signed by that CA for access to the stack.

The other, simpler method involves Logit generating a client private key and
certificate on our behalf, signing it with their CA, and sending it to us.

This manual will cover just the second, simpler method.

## Logit PKI architecture

If you were to inspect the certificate presented by Logit's TLS endpoints on a
freshly provisioned stack with the OpenSSL command line tool...

```
$ openssl s_client -connect f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io:12345 </dev/null
```

You would see that subject of the server certificate presented is
`CN=*.logit.io`, issued by `/C=US/O=GeoTrust Inc./CN=RapidSSL SHA256 CA`, in
turn issued by `/C=US/O=GeoTrust Inc./CN=GeoTrust Global CA` - a fairly
standard wildcard certificate issued by a publicly trusted commercial CA.

This is the certificate referred to by the docs at
https://logit.io/sources/configure/syslog.

When mutual auth is enabled, Logit will switch this out for a server
certificate managed by their own PKI, and their own root CA, making the above
documentation incorrect.

When mutual auth is enabled, the CA chain for the server certificate becomes:

 - `Logit.io Ltd Root CA` 
 - `Logit.io Intermediate CA` 
 - `f046ca39-8388-4c49-a536-19f95a555905 Intermediate CA` - Your stack's
   intermediate CA
 - `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io` - Your stack's Logstash
   endpoint's server certificate

The stack-specific intermediate CA is also the signing CA for the client certificate.

## Certificate bundle provided by Logit

Logit will send you a zip file containing three files.

### `f046ca39-8388-4c49-a536-19f95a555905-<x>.cert.pem`

Where x is an 8-digit hex number. The significance of this number is currently
unclear. This is the client certificate, signed by the stack-specific
intermediate CA.

### `f046ca39-8388-4c49-a536-19f95a555905-<x>.key.encrypted.pem`

The corresponding RSA private key for the above certificate. This private key
needs to be provided to any process that wants to authenticate to the Logit
service to initiate a log stream (Filebeat, Rsyslog). The private key is
encrypted.  The decryption password is your stack's API key, available through
the Logit settings portal.

### `f046ca39-8388-4c49-a536-19f95a555905-ca-chain.pem`

A concatenation of three certificates forming the CA chain, both from the Logit
Root CA to the above certificate, and from the Logit Root CA to the server
certificate.

Although it is permissible in the TLS spec for the client and the server
certificates to be signed by different CAs, not all implemenations will do
this. GnuTLS is used by Rsyslog and has this limitation, documented
[here](http://www.rsyslog.com/doc/ns_gtls.html):

> Even in x509/fingerprint mode, both the client and sever certificate currently
> must be signed by the same root CA. This is an artifact of the underlying
> GnuTLS library and the way we use it.  It is expected that we can resolve this
> issue in the future.

We have not done any further testing around this. There may be some possible
configuration where the Logit server certificate is signed by the GeoTrust
public CA, and the client certifiate is signed by a GDS CA that Logit trusts.

## Install client key, client certificates, and CA chain certificates

Install:

 * `f046ca39-8388-4c49-a536-19f95a555905-ca-chain.pem` 
    to `/etc/ssl/certs/logit-ca.pem`; mode 0644
 * `f046ca39-8388-4c49-a536-19f95a555905-<x>.cert.pem`
    to `/etc/ssl/certs/logit-client.pem`; mode 0644
 * `f046ca39-8388-4c49-a536-19f95a555905-<x>.key.encrypted.pem`
    to `/etc/ssl/private/logit-client.key`; mode 0440

Set the group owner on the client key to `ssl-cert` to grant access to non-root
processes whose UIDs are members of the `ssl-cert` group.

The client key will need to be decrypted before being installed.

## Configuring Filebeat

[Filebeat](https://www.elastic.co/products/beats/filebeat) is a Logstash client
that reads log files from the filesystem and ships them to Logstash as they are
being written to.

Refer to Filebeat's own great documentation for details on installation,
general configuration and operation.

Here is a sample configuration fragment for mutual auth to Logit.  The port
number in the `hosts` specification must be the TCP port assigned to the
`Beats-SSL` input in your stack.

```yaml
output.logstash:
  enabled: true
  hosts:
    - f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io:14303
  ssl:
    enabled: true
    certificate_authorities:
      - /etc/ssl/certs/logstash-ca.crt
    certificate: "/etc/ssl/certs/logstash-client.crt"
    key: "/etc/ssl/private/logstash-client.key"
```

Puppet example with *optional* mutual auth - via the [pcfens-filebeat
module](https://github.com/pcfens/puppet-filebeat):

```puppet
$logstash_output_config = {
  'logstash'                    => {
    'enabled'                   => 'true',
    'hosts'                     => ["${logstash_host}:${logstash_port}"],
    'ssl'                       => {
      'enabled'                 => true,
      'certificate_authorities' => [ $logstash_ca_cert_path ],
    },
  }
}

if $mutual_auth {
  $logstash_mutual_auth_config = {
    'logstash'        => {
      'ssl'           => {
        'key'         => $logstash_client_key_path,
        'certificate' => $logstash_client_cert_path,
      }
    }
  }
}
else {
  $logstash_mutual_auth_config = {}
}


$filebeat_outputs = deep_merge($logstash_output_config, $logstash_mutual_auth_config)

class { '::filebeat':
  manage_repo   => false,
  major_version => 5,
  outputs       => $filebeat_outputs,
}
```

## Configuring Rsyslog

Rsyslog version 8.x is known to work. Earlier versions haven't been tried.
Ubuntu Trusty ships with 7.x, but packages of 8.x for Trusty are available on
the Rsyslog vendor's
[PPA](https://launchpad.net/~adiscon/+archive/ubuntu/v8-stable).

The optional `rsyslog-gnutls` package must be installed.

Load the `gtls` "stream driver" and configure it for operation with Logit:

```
$DefaultNetstreamDriver gtls
$DefaultNetstreamDriverCAFile /etc/ssl/certs/logstash-ca.crt
$ActionSendStreamDriverAuthMode x509/name
$ActionSendStreamDriverPermittedPeer f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io
$ActionSendStreamDriverMode 1
$DefaultNetstreamDriverCertFile /etc/ssl/certs/logstash-client.crt
$DefaultNetstreamDriverKeyFile /etc/ssl/private/logstash-client.key
```

Declare an action on matching messages that uses the `omfwd` module to forward them to Logit:

```
*.*;local2.none action (
  type="omfwd"
  target="f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io"
  name="logstash"
  template="ForwardFormat"
  protocol="TCP"
  port="14305"
  streamdriver="gtls"
  streamdrivermode="1"
  queue.spoolDirectory="/var/spool/rsyslog"
  queue.filename="logstash.queue"
  queue.type="LinkedList"
  queue.saveOnShutdown="on"
  queue.timeOutEnqueue="1"
  queue.maxDiskSpace="1g"
  action.resumeRetryCount="-1"
)
```

Note the `streamdriver="gtls"` and `streamdrivermode="1"` are required here,
despite the earlier config fragment implying that the default behaviour has
been changed.

## Proxy patterns

Architectural constraints around egress security often mean that having each of
your servers connect directly to Logit's endpoint is not an option.

This section covers some possible approaches to securely relaying Beats and
Syslog traffic to Logit.io at your environment's boundary.

### Proxying Beats-SSL (Lumberjack protocol)

The Lumberjack protocol is not HTTP based, and as such, you can't use an HTTP
proxy. Filebeat does, however, support SOCKS negotiation.

A sample minimal configuration for a Dante socks proxy:

```
logoutput: syslog

internal: eth0 port = 1080
external: eth0

method: none
clientmethod: none

user.privileged: proxy
user.notprivileged: nobody
user.libwrap: nobody

client pass {
  from: 10.1.0.0/24
  to: 10.1.0.0/24
  method: none
  log: connect disconnect error
}

client block {
  from: 0.0.0.0/0
  to: 0.0.0.0/0
  log: connect error
}

pass {
  from: 10.1.0.0/24 to: f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io port = 12345
  protocol: tcp
  command: connect
  log: connect disconnect error
}
```

In this example, `10.1.0.0/24` is the private network CIDR range of the
log-generating servers that you're proxying for, and `12345` is the TCP port of
the Beats-SSL input on the `f046ca39-8388-4c49-a536-19f95a555905-ls.logit.io`
Logstash endpoint.

### Proxying Syslog

*This section may need updating as the examples have not yet been tested*

The Syslog protocol is designed to be relayed, and rsyslog supports this fully.

The configuration example in the above section will in fact already do the
egress-proxy-to-Logit part of the relay unmodified, and this should be applied to your
egress proxy's rsyslogd config.

You may need some additional configuration to allow your egress proxy's rsyslogd
to accept syslog messages from your internal hosts. For example:

```
$ModLoad imudp
$UDPServerAddress 0.0.0.0
$UDPServerRun 514
```

