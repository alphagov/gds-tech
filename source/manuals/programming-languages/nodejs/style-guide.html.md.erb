---
title: GDS Node.js Style Guide
---

# <%= current_page.data.title %>

## General style

As with all JavaScript at GDS, for Node.js applications we use the [standard] style.

## Use strict mode

[Strict mode] should be enabled for Node.js modules, as in the browser this prevents polluting the global scope (in
Node.js this would pollute the `global` object, rather than the `window` object).

## ES2015+

Because with Node.js you control the version of the interpreter you're code is running on,
you have access to many the latest features of JavaScript, such as:

- [let] and [const]
- [Arrow functions]
- [Array.prototype] methods like `Array.map()`, `Array.find()` and `Array.values()`
- The [spread operator]

However use caution when using cutting edge JavaScript features and be sure to read the [documentation].

A full list of what features are supported in each version of Node.js can be found at [Node Green].


### let and const

For Node.js code, be explicit about variable mutability using [const] and [let]:

```
const foo // GOOD: explicitly immutable variable declaration
let bar // GOOD: expicitly mutable variable declaration
var baz // BAD: not explicit about mutability of variable
```

This makes code easier to understand, as well as providing a feedback loop if a [const] variable is inadvertently reassigned.

### Promises

Promises have been available natively in Node.js since version 0.12.

In order to have a consistent `Promise` implementation between applications and across projects,
we use the native constructor over alternatives like `q` or `bluebird`.

Promise rejections should, as a general rule, reject with an instance of `Error` or one of [it's subclasses](https://nodejs.org/api/errors.html).
This allows developers to know what they have to handle when a promise is rejected.

```
'use strict'

// NPM dependencies
const request = require('request')

function doSomethingAsync() {
  return new Promise((resolve, reject) => {
    request.get('https://www.example.com', (err, response, body) => {
      if (err) {
        reject(err)
      } else {
        resolve(body)
      }
    })
  })
}
```


## Organise your imports

Import your dependencies at the top of each file, and group them into 'core', 'npm' and 'local' dependencies, like in the below example.
This makes your imports clearer and allows others to  more easily understand and maintain cross dependencies of each file.

```
'use strict'

// Core dependencies
const crypto = require('crypto')
const fs = require('fs')
const path = require('path')

// NPM dependencies
const express = require('express')
const lodash = require('lodash')
const request = require('request')

// Local dependencies
const config = require('../../config')
const controller = require('./controller')
const utilFunction = require('../../utils/util_function.js')
```

## Avoiding Unnecessary Function Declarations

When building high volume applications in Node, it is important to be conscious of (and kind to) the V8 Engine's garbage collector.

One area to be aware of, in order to maximise performance, is avoiding unnecessary function declarations within another function's scope.
These unnecessary declarations result in the V8 engine needing to declare these functions on every invocation of the function.

If a separate function is required, for example to encapsulate a specific complex task or because to allow multiple calls to it,
then:

- it should wherever possible be declared outside the calling function's scope,
- and if so it should be declared either:
    - in a separate module if it is likely to be depended on by multiple modules,
    - or at the bottom of the module where it is called, taking advantage of [function hoisting] to make the code clearer.

[documentation]: https://developer.mozilla.org/en-US/docs/Web/JavaScript
[const]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const
[let]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
[Arrow functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
[spread operator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator
[Array.prototype]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype
[standard]: https://standardjs.com/
[Node Green]: http://node.green/
[Strict mode]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
[Node.js Errors]: https://nodejs.org/api/errors.html
[function hoisting]: https://developer.mozilla.org/en-US/docs/Glossary/Hoisting