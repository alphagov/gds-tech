---
title: Testing Node.js Apps at GDS
---

# <%= current_page.data.title %>

## Libraries

At GDS we use Mocha as our test runner and Chai as our assertion library.
These form part of a larger group of commonly used testing libraries, a non-exhaustive list of libraries we use can be found below.

| Library | Purpose |
|:-------|:-------|
| [Mocha] | Test Runner |
| [Chai] | Assertion library (NOTE: We use chai's `expect` assertion style and NOT it's `should` style. |
| [Sinon] | Used to create spys on methods for specific functions |
| [Nock] | Used for mocking external http and https calls |
| [Supertest] | Used to test endpoints on Express.js applications |
| [Pact] | Used for contract testing |
| [Cheerio] | Used for testing rendered HTML templates |

## We do not use `chai.should()`

We use `chai.expect()` over `chai.should()` for our test assertions, this is because:

- The `.should` style alters the prototype of all objects across Node. Changing prototypes of native types is generally bad practice.
- Because `.should` affects global scope, it can create interdependent tests unless `chai.should()` is called in every test file. This can be particularly troublesome if you are running/debugging tests in an IDE.

## Testing Asynchronously

Asynchronous code is tested using Mocha's [done] callback. More on this can be found here.

We follow the pattern of handling asynchronous calls in `before()` or `beforeEach()`, then testing the result synchronously and atomicly in subsequent `it()` functions.
This pattern allows means:

- Its easy to write simple `it()` functions and simple assertions, which are both more readable and more understandable
- Because `it()` functions can be more atomic in what they test, the feedback when tests brake can be be more descriptive

However it is important to note that any unintended errors thrown in any asynchronous tests are passed to `done()`.
This means that the content of the errors can be fed back to a developer, so that the developer is not just presented with generic error text such as: `Error: Timeout of 2000ms exceeded`.

An example of this pattern can be found below.

_Also note the [destructuring assignment] pattern used to import `expect` from the `chai` library._

```
'use strict'

// NPM dependencies
const request = require('request')
const {expect} = require('chai')

describe('Testing a method that returns a promise', () => {
 describe('when it successfully resolves', () => {
   let result
   before(done => {
     request.get('http://google.com', (err, res) => {
       result = res
       done(err)
     })
   })

   it('should resolve with a http status code of 200', () => {
     expect(result).to.have.property('statusCode').to.equal(200)
   })

   it(`should resolve with a ‘Content-Type’ header of 'text/html'`, () => {
     expect(result.headers).to.have.property('content-type').to.include('text/html')
   })
  })
 })
```


[destructuring assignment]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
[done]: https://mochajs.org/#asynchronous-code
[Mocha]: https://mochajs.org
[Chai]: http://chaijs.com/
[Sinon]: http://sinonjs.org/
[Nock]: https://github.com/node-nock/nock
[Supertest]: https://github.com/visionmedia/supertest
[Pact]: https://pact.io/
[Cheerio]: https://cheerio.js.org/

