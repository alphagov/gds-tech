---
title: Using Node.js at GDS
---

# <%= current_page.data.title %>

## Important Note

No new projects at GDS should use Node.js without prior consultation with the Deputy Director Technology Operations.
The [programming language recommendations](../../../standards/programming-languages.html#javascript) section has more detail on how we currently use Node.js at GDS and why this decision has been made.


## Guidance
As with all Javascript at GDS, for Node.js applications we use the [standard] style.

When writing server-side Javascript for Node.js, there can be additional considerations on-top of those covered by the [standard] style.
These can be found below in the [best practices](#best-practices) in this manual.

As always the rules in the [best practices](#best-practices) should be followed only in conjunction with the advice on consistency on the main [programming languages manual page](../../programming-languages.html).

If you want to add guidance on Node.js please create a pull request against this repo.

### Versions
We should only use LTS (Long-Term-Support) versions of Node.js, these are even numbered versions (Node 6.x, 8.x etc.).
However it is important to keep an eye on the [Node.js LTS Schedule] as to when versions move in and out of LTS.

### Updating this manual

This manual, is not presumed to be infallible or beyond dispute.
If you think something is missing or if you'd like to see something changed then:

1. _(optional)_ Start with the [#Nodejs] community's Slack channel. See what other developers think and you'll get an idea
of how likely your proposal is of being accepted as a pull request even before you put in any work.
2. Check out the making changes section of the [GDS Tech repo][github-gds-tech-readme-making-changes]
3. Create a pull request against [GDS Tech repo][github-gds-tech]


## Best practices
We follow the guidelines set out by [Node.js best practices], so please star the repo.

## Testing

### Libraries

At GDS we use Mocha as our test runner and Chai as our assertion library.
These form part of a larger group of commonly used testing libraries, a non-exhaustive list of libraries we use can be found below.

| Library | Purpose |
|:-------|:-------|
| [Mocha] | Test Runner |
| [Chai] | Assertion library (NOTE: We use chai's `expect` assertion style and NOT it's `should` style. |
| [Sinon] | Used to create spys on methods for specific functions |
| [Nock] | Used for mocking external http and https calls |
| [Supertest] | Used to test endpoints on Express.js applications |
| [Pact] | Used for contract testing |
| [Cheerio] | Used for testing rendered HTML templates |

### Do not use `chai.should()`

We use `chai.expect()` over `chai.should()` for our test assertions, this is because:

- The `.should` style alters the prototype of all objects across Node. Changing prototypes of native types is generally bad practice.
- Because `.should` affects global scope, it can create interdependent tests unless `chai.should()` is called in every test file. This can be particularly troublesome if you are running/debugging tests in an IDE.

### Test asynchronously

Asynchronous code is tested using Mocha's [done] callback. More on this can be found here.

We follow the pattern of handling asynchronous calls in `before()` or `beforeEach()`, then testing the result synchronously and atomically in subsequent `it()` functions.
This pattern allows means:

- It's easy to write simple `it()` functions and simple assertions, which are both more readable and more understandable
- Because `it()` functions can be more atomic in what they test, the feedback when tests brake can be be more descriptive

However it is important to note that any unintended errors thrown in any asynchronous tests are passed to `done()`.
This means that the content of the errors can be fed back to a developer, so that the developer is not just presented with generic error text such as: `Error: Timeout of 2000ms exceeded`.

An example of this pattern can be found below.

_Also note the [destructuring assignment] pattern used to import `expect` from the `chai` library._

``` js
'use strict'

// NPM dependencies
const request = require('request')
const {expect} = require('chai')

describe('Testing a method that returns a promise', () => {
  describe('when it successfully resolves', () => {
    let result
    before(done => {
      request.get('http://google.com', (err, res) => {
        result = res
        done(err)
      })
    }) 

    it('should resolve with a http status code of 200', () => {
      expect(result).to.have.property('statusCode').to.equal(200)
    }) 

    it(`should resolve with a ‘Content-Type’ header of 'text/html'`, () => {
      expect(result.headers).to.have.property('content-type').to.include('text/html')
    })
  })
})
```

## Futher resources
* **[node.cool]** — A curated list of Node.js packages and resources by Sindre Sorhus
* **[Node ES2015 support]** — Check Node.js support for ES2015+ features
* **[JS documentation]** — MDN's definitive JS docs

[github-gds-tech]: https://github.com/alphagov/gds-tech
[github-gds-tech-readme-making-changes]: https://github.com/alphagov/gds-tech/blob/master/README.md#making-changes
[standard]: https://standardjs.com/
[Node.js LTS Schedule]: https://github.com/nodejs/Release

[Node.js best practices]: https://github.com/i0natan/nodebestpractices
[#Nodejs]: https://govuk.slack.com/messages/nodejs

[destructuring assignment]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
[done]: https://mochajs.org/#asynchronous-code
[Mocha]: https://mochajs.org
[Chai]: http://chaijs.com/
[Sinon]: http://sinonjs.org/
[Nock]: https://github.com/node-nock/nock
[Supertest]: https://github.com/visionmedia/supertest
[Pact]: https://pact.io/
[Cheerio]: https://cheerio.js.org/

[node.cool]: https://node.cool
[Node ES2015 support]: http://node.green/
[JS documentation]: https://developer.mozilla.org/en-US/docs/Web/JavaScript
