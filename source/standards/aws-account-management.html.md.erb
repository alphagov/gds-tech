---
title: AWS Account Management
expires: 2018-10-18
account_list:
  - team: 'GOV.UK'
    url: 'https://github.com/alphagov/govuk-aws-data/blob/master/docs/govuk-aws-accounts.md'
  - team: 'Verify'
    url: 'https://github.com/alphagov/verify-blackbox-passwords/blob/master/aws-accounts.info'
  - team: 'Digital Marketplace'
    url: 'https://alphagov.github.io/digitalmarketplace-manual/aws-accounts.html#available-roles'
---

# <%= current_page.data.title %>

<%= partial :expires %>

GDS manage a number of Amazon Web Services (AWS) accounts.
User accounts are managed centally in a "base account" from which users
can access the target accounts through a process called "assuming roles".

## Accessing the AWS Console

<ul>
  <li>
    Sign in to the GDS base account at:
    <a href="https://gds-users.signin.aws.amazon.com/console">https://gds-users.signin.aws.amazon.com/console</a>
    <details>
      <summary><small>Screenshot of the sign in page</small></summary>
      <img src="/images/aws-base-account-signin-form.png" alt="Screenshot of the sign in page">
    </details>
  </li>
  <li>
    From the menu in the top right, select "Switch Role"
    <details>
      <summary><small>Screenshot of the switch role menu item</small></summary>
      <img src="/images/aws-switch-role-menu.png" alt="Screenshot of the sign in page">
    </details>
  </li>
  <li>
    Fill in the account number and role you're switching to
    <details>
      <summary><small>Screenshot of the switch role page</small></summary>
      <img src="/images/aws-switch-role-form.png" alt="Screenshot of the sign in page">
    </details>
    <details>
      <summary><small>Teams' lists of accounts and roles</small></summary>
      <ul>
        <% for link in current_page.data.account_list %>
          <li><a href="<%= link['url'] %>"><%= link['team'] %></a></li>
        <% end %>
      </ul>
    </details>
  </li>
</ul>

## Accessing AWS from the command line

There are several command line tools which interact with AWS, including:

* [AWS Command Line Interface](https://aws.amazon.com/cli/)
* [AWS Shell](https://github.com/awslabs/aws-shell)
* [Terraform](https://www.terraform.io/)

These need credentials for accessing AWS. The simplest way of managing these credentials
is with an AWS credentials file.

### Create an AWS credentials file

Create a file at `~/.aws/credentials` and add the following text:

```
[gds-users]
aws_access_key_id = MYACCESSKEYID
aws_secret_access_key = MYSECRETACCESSKEY
```

You can find your access key id and secret access key by logging into the AWS console
to the base account and following [the AWS instructions here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey).

For each role you need to assume, add a section like the following:

```
[your-account-name]
source_profile = gds-users
role_arn = <role arn>
mfa_serial = <mfa device arn>
```

Where `<role arn>` is taken from your Team's list of accounts and roles...

<details>
  <summary><small>Teams' lists of accounts and roles</small></summary>
  <ul>
    <% for link in current_page.data.account_list %>
      <li><a href="<%= link['url'] %>"><%= link['team'] %></a></li>
    <% end %>
  </ul>
</details>

... and `<mfa device arn>` is your user's assigned MFA device.

<details>
  <summary><small>How to find your MFA device ARN</small></summary>
  <li>Sign in to the base account in the console</li>
  <li>Navigat to `IAM` > `Users` > `$your-user`</li>
  <li>Select the `Security credentials` tab</li>
  <li>Look for the `Asssigned MFA device`</li>
  </ul>
</details>


## How GDS manages AWS accounts

TODO

## Advice on managing cross account access


Cross account access allows user accounts in one AWS account (the *base* account) to access resources in another AWS account (the *target* account).

Access to the resources within the target AWS account is controlled through IAM roles which are managed within that target AWS account.

The IAM roles are used to establish trust relationships between the target (*trusting*) AWS account and the base (*trusted*) AWS account.

It is the target AWS accounts responsibility to manage access to it's resources. Although user accounts are managed within the base AWS account access to resources is managed by the target AWS account in which those resources reside.

### Manage Access to Resources

![Assume Role Diagram](../images/assume-role.svg)

The users exist in the base account and have permission to assume role into the target account.

The target account defines the roles (Data Analyst in this example) which the users in the base account can assume. 

#### The Trust Relationship (Assume Role Policy)

The trust relationship describes which entities can assume the role (*principles*) and imposes *conditions* on how and when those entities can assume the role.

##### Principles

A principle can be a user account, an AWS account or a role. The principle entities are expressed as an AWS ARN.

It is **strongly** recommended not to trust an AWS account. Trusting an AWS account base account allows all of the entities within the base account to assume the role. 

##### Conditions

Conditionals can be used to enforce the presence of MFA, restrict access to particular source ip addresses or restrict access to particular times of the day.

##### An example Trust Relationship policy
    {
      "Version": "2012-10-17",
      "Statement": {
        "Effect": "Allow",
        "Principal": { "AWS": "arn:aws:iam::123456789012:user/example.user@digital.cabinet-office.gov.uk" },
        "Action": "sts:AssumeRole",
        "Condition": { "Bool": { "aws:MultiFactorAuthPresent": "true" } }
      }
    }

#### Resource Permissions (Policies)

Access to resources are managed through IAM Policies, these can be custom or defined by Amazon. Roles should be designed around the permissions required to complete a task. 
